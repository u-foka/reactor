stages:
  - build
  - test
  - pack

variables:
    DOCKER_DRIVER: overlay2
    GIT_SUBMODULE_STRATEGY: normal
    CTEST_OUTPUT_ON_FAILURE: 1

build-ubuntu:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

debug-build-ubuntu:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

test-ubuntu:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  artifacts:
    paths:
      - test-build-ubuntu/ccov
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "test-build-ubuntu"
    BUILD_TYPE: "Debug"
    CXX11: "OFF"
    COVERAGE: "ON"
    TARGET: "check"
  script:
    - ./ci.sh

release-test-ubuntu:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

doc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  artifacts:
    paths:
      - build-doc/doc
  variables:
    BUILD_DIR: "build-doc"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "doc"
  script:
    - ./ci.sh

build-arch:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

debug-build-arch:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

test-arch:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  artifacts:
    paths:
      - test-build-arch/ccov
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "test-build-arch"
    BUILD_TYPE: "Debug"
    CXX11: "OFF"
    COVERAGE: "ON"
    TARGET: "check"
  script:
    - ./ci.sh

release-test-arch:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh
    
build-ubuntu-gcc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

debug-build-ubuntu-gcc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

test-ubuntu-gcc:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

release-test-ubuntu-gcc:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

build-arch-gcc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

debug-build-arch-gcc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

test-arch-gcc:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

release-test-arch-gcc:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "OFF"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

build-ubuntu-cpp11-gcc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

debug-build-ubuntu-cpp11-gcc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

test-ubuntu-cpp11-gcc:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

release-test-ubuntu-cpp11-gcc:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

build-arch-cpp11-gcc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

debug-build-arch-cpp11-gcc:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

test-arch-cpp11-gcc:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

release-test-arch-cpp11-gcc:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "gcc"
    CXX: "g++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

build-msvc:
  stage: build
  tags:
    - msvc
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..\
    - cmake --build . --target %CI_PROJECT_NAME%
    
debug-build-msvc:
  stage: build
  tags:
    - msvc
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug ..\
    - cmake --build . --target %CI_PROJECT_NAME%
    
test-msvc:
  stage: test
  tags:
    - msvc
  dependencies: [] # Disable artifact restoration
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake ../ -DCMAKE_BUILD_TYPE=Debug # -DCODE_COVERAGE=ON # No code coverage on msvc yet
    - cmake --build . --target check

release-test-msvc:
  stage: test
  tags:
    - msvc
  dependencies: [] # Disable artifact restoration
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..\ # -DCODE_COVERAGE=ON # No code coverage on msvc yet
    - cmake --build . --target check

build-msvc-shared:
  stage: build
  tags:
    - msvc
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=On ..\
    - cmake --build . --target %CI_PROJECT_NAME%
    
debug-build-msvc-shared:
  stage: build
  tags:
    - msvc
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=On ..\
    - cmake --build . --target %CI_PROJECT_NAME%
    
test-msvc-shared:
  stage: test
  tags:
    - msvc
  dependencies: [] # Disable artifact restoration
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=On ../ # -DCODE_COVERAGE=ON # No code coverage on msvc yet
    - cmake --build . --target check

release-test-msvc-shared:
  stage: test
  tags:
    - msvc
  dependencies: [] # Disable artifact restoration
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=On ..\ # -DCODE_COVERAGE=ON # No code coverage on msvc yet
    - cmake --build . --target check

build-ubuntu-cpp11:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

debug-build-ubuntu-cpp11:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

test-ubuntu-cpp11:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  artifacts:
    paths:
      - test-build-ubuntu-cpp11/ccov
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "test-build-ubuntu-cpp11"
    BUILD_TYPE: "Debug"
    CXX11: "ON"
    COVERAGE: "ON"
    TARGET: "check"
  script:
    - ./ci.sh

release-test-ubuntu-cpp11:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

build-arch-cpp11:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

debug-build-arch-cpp11:
  stage: build
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Debug"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "${CI_PROJECT_NAME}"
  script:
    - ./ci.sh

test-arch-cpp11:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  artifacts:
    paths:
      - test-build-arch-cpp11/ccov
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "test-build-arch-cpp11"
    BUILD_TYPE: "Debug"
    CXX11: "ON"
    COVERAGE: "ON"
    TARGET: "check"
  script:
    - ./ci.sh

release-test-arch-cpp11:
  stage: test
  tags:
    - docker
  image: registry.iwstudio.hu/iws/abuild:latest
  dependencies: [] # Disable artifact restoration
  variables:
    CC: "clang"
    CXX: "clang++"
    BUILD_DIR: "build"
    BUILD_TYPE: "Release"
    CXX11: "ON"
    COVERAGE: "OFF"
    TARGET: "check"
  script:
    - ./ci.sh

build-msvc-cpp11:
  stage: build
  tags:
    - msvc
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCXX11_ENABLED=ON -DCMAKE_BUILD_TYPE=Release ..\
    - cmake --build . --target %CI_PROJECT_NAME%
    
debug-build-msvc-cpp11:
  stage: build
  tags:
    - msvc
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCXX11_ENABLED=ON -DCMAKE_BUILD_TYPE=Debug ..\
    - cmake --build . --target %CI_PROJECT_NAME%
    
test-msvc-cpp11:
  stage: test
  tags:
    - msvc
  dependencies: [] # Disable artifact restoration
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake ../ -DCXX11_ENABLED=ON -DCMAKE_BUILD_TYPE=Debug # -DCODE_COVERAGE=ON # No code coverage on msvc yet
    - cmake --build . --target check

release-test-msvc-cpp11:
  stage: test
  tags:
    - msvc
  dependencies: [] # Disable artifact restoration
  script:
    - call "%VCVARSALL%" x64
    - mkdir build
    - cd build
    - cmake -G Ninja -DCXX11_ENABLED=ON -DCMAKE_BUILD_TYPE=Release ..\ # -DCODE_COVERAGE=ON # No code coverage on msvc yet
    - cmake --build . --target check

pack:
  stage: pack
  tags:
    - docker
  image: registry.iwstudio.hu/iws/ubuild:latest
  only:
    - /^v\d/
  except:
    - branches
  dependencies: [] # Disable artifact restoration
  artifacts:
    paths:
      - build-pack/*.zip
  script:
    - mkdir build-pack
    - cd build-pack
    - cmake ../ -DGENERATE_VERSION=ON
    - cpack --config CPackSourceConfig.cmake

